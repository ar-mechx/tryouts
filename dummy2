library identifier: 'lib@prodaction', retriever: legacySCM([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'smtp', url: 'http://10.208.202.252/cicd/sharedlib.git']]])

pomPath = './pom.xml'

pipeline {
    options {
        disableConcurrentBuilds()
    }

    agent {
        label 'android'
    }

    parameters {
        choice(
            choices: ['Deploy To Container(ocp)', 'Deploy to VM(legacy)', 'Deploy to Container and VM'],
            description: 'Choose the build option',
            name: 'BUILD_OPTION'
        )
    }

    tools {
        jdk 'jdk8'
    }

    stages {
        stage ('Email notification') {
            steps {
                echo '>>> Send New application build notification'
                mail bcc: '', body: """Dears,
                Thanks. """, cc: '', from: '', replyTo: '', subject: "New Build # [$BUILD_NUMBER] triggered for Job [$JOB_NAME]", to:"$EMAIL_TO"
            }
        }

        stage("Generate setting.xml") {
            steps {
                script {
                    setting.setting()
                }
            }
        }

        stage('Build Jar') {
            steps {
                script {
                    sh "mvn -s setting.xml --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true validate && mvn --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true  -DskipTests validate"
                    sh "mvn -s setting.xml --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true validate && mvn --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true  -DskipTests clean install"
                }
            }
        }
        
        stage("Archive") {
            steps {
                script {
                    java.archive()
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    deploy.imagebuild()
                }
            }
        }

        stage('Update Gitlab For ArgoCD') {
            when {
                expression { params.BUILD_OPTION != 'Deploy to VM(legacy)' }
            }
            steps {
                script {
                    wrap([$class: 'BuildUser']) {
                        env.user = env.BUILD_USER
                    }
                    sh """ if [ -d ${WORKSPACE}/prod-env-channel-management-core ]; then break; else mkdir ${WORKSPACE}/prod-env-channel-management-core; fi """
                }
            }
        }
        
        stage("Ansible Deployment") {
            when {
                expression { params.BUILD_OPTION != 'Deploy To Container(ocp)' }
            }
            steps {
                script {
                    sleep 60
                }
            }
        }
    }

    post {
        always {
            echo 'I will always run, and I can clean up the workspace here......'
        }
        success {
            mail bcc: '', body: """Dears,
            Congratulations the build # $BUILD_NUMBER for the Job [$JOB_NAME] has succeeded.
            Thanks. """, cc: '', from: '', replyTo: '', subject: "Build # [$BUILD_NUMBER] triggered for Job [$JOB_NAME] >> Success", to: "$EMAIL_TO"
        }
    }
}
